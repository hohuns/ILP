{"ast":null,"code":"var _jsxFileName = \"/Users/sungjaejoo/Documents/github/InterLogger Version2_Private/src/components/LogInForm/DialogLanLogin.js\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport { Grid, Typography, Box } from \"@mui/material\";\nimport ReactDataGrid from \"@inovua/reactdatagrid-enterprise\";\nimport \"@inovua/reactdatagrid-enterprise/index.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { usersActions } from \"../../store/userSlice\";\nconst gridStyle = {\n  minHeight: 250\n};\nconst columns = [{\n  name: \"la\",\n  header: \"Language\",\n  defaultFlex: 1,\n  type: \"string\"\n}, {\n  name: \"id\",\n  header: \"Id\",\n  type: \"number\",\n  defaultVisible: false\n}]; // eslint-disable-next-line arrow-body-style\n\nconst DialogLanLogin = _ref => {\n  let {\n    open,\n    close\n  } = _ref;\n  const [selected, setSelected] = useState({});\n  const storedSite = localStorage.getItem(\"siteCode\");\n  const dispatch = useDispatch();\n\n  const handleClose = () => {\n    close();\n  };\n\n  const selectHandler = async () => {// let tempLocation = locationArray\n    //   .filter((r) => {\n    //     return r.id === selected;\n    //   })\n    //   .map((r) => r.siteCode);\n    // SetSelectedSite(tempLocation);\n    // dispatch(usersActions.updateSiteCode(tempLocation));\n    // try {\n    //   const data = await fetch(`/echoMe/site?siteCode=${tempLocation}`);\n    //   if (!data.ok) {\n    //     console.log(\"error message from loadLocation\");\n    //     let errorText = await data.text();\n    //     console.log(errorText);\n    //     throw Error(errorText);\n    //   }\n    //   alert(`Site is succesfully seleced to ${tempLocation}`);\n    //   localStorage.setItem(\"siteCode\", tempLocation);\n    //   handleClose();\n    // } catch (err) {\n    //   console.error(err);\n    //   alert(err);\n    // }\n  };\n\n  const locationReloader = async () => {\n    try {\n      const data = await fetch(`/echoMe/site?siteCode=${storedSite}`);\n\n      if (!data.ok) {\n        console.log(\"error message from locationReloader\");\n        let errorText = await data.text();\n        console.log(errorText);\n        throw Error(errorText);\n      }\n    } catch (err) {\n      console.error(err);\n      alert(err);\n    }\n  }; // eslint-disable-next-line no-shadow\n\n\n  const onSelectionChange = useCallback(_ref2 => {\n    let {\n      selected\n    } = _ref2;\n    setSelected(selected);\n  }, []);\n  useEffect(() => {\n    loadLocation();\n  }, []);\n  useEffect(() => {\n    locationReloader();\n  }, [storedSite]);\n  console.log(storedSite);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Dialog, {\n    open: open,\n    onClose: close,\n    fullWidth: true,\n    maxWidth: \"sm\",\n    disableEscapeKeyDown: true,\n    onBackdropClick: \"false\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, \"Language Selection /\\uC5B8\\uC5B4 \\uC120\\uD0DD\"), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DialogContentText, {\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, \"Please Select the Site. / \\uC5B8\\uC5B4\\uB97C \\uC120\\uD0DD\\uD574 \\uC8FC\\uC138\\uC694.\", /*#__PURE__*/React.createElement(Box, {\n    variant: \"div\",\n    sx: {\n      padding: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ReactDataGrid, {\n    idProperty: \"id\",\n    checkboxColumn: true,\n    selected: selected,\n    multiSelect: false,\n    onSelectionChange: onSelectionChange,\n    style: gridStyle,\n    columns: columns,\n    dataSource: locationArray,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 21\n    }\n  }))))))), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: selectHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, \"Select\"))));\n};\n\nexport default DialogLanLogin;","map":{"version":3,"sources":["/Users/sungjaejoo/Documents/github/InterLogger Version2_Private/src/components/LogInForm/DialogLanLogin.js"],"names":["useCallback","useEffect","useState","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Grid","Typography","Box","ReactDataGrid","useDispatch","useSelector","usersActions","gridStyle","minHeight","columns","name","header","defaultFlex","type","defaultVisible","DialogLanLogin","open","close","selected","setSelected","storedSite","localStorage","getItem","dispatch","handleClose","selectHandler","locationReloader","data","fetch","ok","console","log","errorText","text","Error","err","error","alert","onSelectionChange","loadLocation","padding","locationArray"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,IAAT,EAAeC,UAAf,EAA2BC,GAA3B,QAAsC,eAAtC;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,OAAO,4CAAP;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,YAAT,QAA6B,uBAA7B;AAEA,MAAMC,SAAS,GAAG;AAAEC,EAAAA,SAAS,EAAE;AAAb,CAAlB;AAEA,MAAMC,OAAO,GAAG,CACd;AACEC,EAAAA,IAAI,EAAE,IADR;AAEEC,EAAAA,MAAM,EAAE,UAFV;AAGEC,EAAAA,WAAW,EAAE,CAHf;AAIEC,EAAAA,IAAI,EAAE;AAJR,CADc,EAOd;AAAEH,EAAAA,IAAI,EAAE,IAAR;AAAcC,EAAAA,MAAM,EAAE,IAAtB;AAA4BE,EAAAA,IAAI,EAAE,QAAlC;AAA4CC,EAAAA,cAAc,EAAE;AAA5D,CAPc,CAAhB,C,CAUA;;AACA,MAAMC,cAAc,GAAG,QAAqB;AAAA,MAApB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAoB;AAC1C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B1B,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM2B,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAnB;AACA,QAAMC,QAAQ,GAAGnB,WAAW,EAA5B;;AAEA,QAAMoB,WAAW,GAAG,MAAM;AACxBP,IAAAA,KAAK;AACN,GAFD;;AAIA,QAAMQ,aAAa,GAAG,YAAY,CAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAvBD;;AAyBA,QAAMC,gBAAgB,GAAG,YAAY;AACnC,QAAI;AACF,YAAMC,IAAI,GAAG,MAAMC,KAAK,CAAE,yBAAwBR,UAAW,EAArC,CAAxB;;AACA,UAAI,CAACO,IAAI,CAACE,EAAV,EAAc;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACA,YAAIC,SAAS,GAAG,MAAML,IAAI,CAACM,IAAL,EAAtB;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ;AACA,cAAME,KAAK,CAACF,SAAD,CAAX;AACD;AACF,KARD,CAQE,OAAOG,GAAP,EAAY;AACZL,MAAAA,OAAO,CAACM,KAAR,CAAcD,GAAd;AACAE,MAAAA,KAAK,CAACF,GAAD,CAAL;AACD;AACF,GAbD,CAlC0C,CAiD1C;;;AACA,QAAMG,iBAAiB,GAAG/C,WAAW,CAAC,SAAkB;AAAA,QAAjB;AAAE2B,MAAAA;AAAF,KAAiB;AACtDC,IAAAA,WAAW,CAACD,QAAD,CAAX;AACD,GAFoC,EAElC,EAFkC,CAArC;AAIA1B,EAAAA,SAAS,CAAC,MAAM;AACd+C,IAAAA,YAAY;AACb,GAFQ,EAEN,EAFM,CAAT;AAIA/C,EAAAA,SAAS,CAAC,MAAM;AACdkC,IAAAA,gBAAgB;AACjB,GAFQ,EAEN,CAACN,UAAD,CAFM,CAAT;AAIAU,EAAAA,OAAO,CAACC,GAAR,CAAYX,UAAZ;AAEA,sBACE,uDACE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAEJ,IADR;AAEE,IAAA,OAAO,EAAEC,KAFX;AAGE,IAAA,SAAS,EAAE,IAHb;AAIE,IAAA,QAAQ,EAAC,IAJX;AAKE,IAAA,oBAAoB,EAAE,IALxB;AAME,IAAA,eAAe,EAAC,OANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDARF,eASE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,iBAAD;AAAmB,IAAA,KAAK,EAAC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yGAEE,oBAAC,GAAD;AAAK,IAAA,OAAO,EAAC,KAAb;AAAmB,IAAA,EAAE,EAAE;AAAEuB,MAAAA,OAAO,EAAE;AAAX,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAmB,IAAA,EAAE,EAAE,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AACE,IAAA,UAAU,EAAC,IADb;AAEE,IAAA,cAAc,MAFhB;AAGE,IAAA,QAAQ,EAAEtB,QAHZ;AAIE,IAAA,WAAW,EAAE,KAJf;AAKE,IAAA,iBAAiB,EAAEoB,iBALrB;AAME,IAAA,KAAK,EAAE/B,SANT;AAOE,IAAA,OAAO,EAAEE,OAPX;AAQE,IAAA,UAAU,EAAEgC,aARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CADF,CAFF,CADF,CATF,eAgCE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEhB,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CAhCF,CADF,CADF;AAwCD,CAxGD;;AA0GA,eAAeV,cAAf","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport { Grid, Typography, Box } from \"@mui/material\";\nimport ReactDataGrid from \"@inovua/reactdatagrid-enterprise\";\nimport \"@inovua/reactdatagrid-enterprise/index.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { usersActions } from \"../../store/userSlice\";\n\nconst gridStyle = { minHeight: 250 };\n\nconst columns = [\n  {\n    name: \"la\",\n    header: \"Language\",\n    defaultFlex: 1,\n    type: \"string\",\n  },\n  { name: \"id\", header: \"Id\", type: \"number\", defaultVisible: false },\n];\n\n// eslint-disable-next-line arrow-body-style\nconst DialogLanLogin = ({ open, close }) => {\n  const [selected, setSelected] = useState({});\n  const storedSite = localStorage.getItem(\"siteCode\");\n  const dispatch = useDispatch();\n\n  const handleClose = () => {\n    close();\n  };\n\n  const selectHandler = async () => {\n    // let tempLocation = locationArray\n    //   .filter((r) => {\n    //     return r.id === selected;\n    //   })\n    //   .map((r) => r.siteCode);\n    // SetSelectedSite(tempLocation);\n    // dispatch(usersActions.updateSiteCode(tempLocation));\n    // try {\n    //   const data = await fetch(`/echoMe/site?siteCode=${tempLocation}`);\n    //   if (!data.ok) {\n    //     console.log(\"error message from loadLocation\");\n    //     let errorText = await data.text();\n    //     console.log(errorText);\n    //     throw Error(errorText);\n    //   }\n    //   alert(`Site is succesfully seleced to ${tempLocation}`);\n    //   localStorage.setItem(\"siteCode\", tempLocation);\n    //   handleClose();\n    // } catch (err) {\n    //   console.error(err);\n    //   alert(err);\n    // }\n  };\n\n  const locationReloader = async () => {\n    try {\n      const data = await fetch(`/echoMe/site?siteCode=${storedSite}`);\n      if (!data.ok) {\n        console.log(\"error message from locationReloader\");\n        let errorText = await data.text();\n        console.log(errorText);\n        throw Error(errorText);\n      }\n    } catch (err) {\n      console.error(err);\n      alert(err);\n    }\n  };\n\n  // eslint-disable-next-line no-shadow\n  const onSelectionChange = useCallback(({ selected }) => {\n    setSelected(selected);\n  }, []);\n\n  useEffect(() => {\n    loadLocation();\n  }, []);\n\n  useEffect(() => {\n    locationReloader();\n  }, [storedSite]);\n\n  console.log(storedSite);\n\n  return (\n    <>\n      <Dialog\n        open={open}\n        onClose={close}\n        fullWidth={true}\n        maxWidth=\"sm\"\n        disableEscapeKeyDown={true}\n        onBackdropClick=\"false\"\n      >\n        <DialogTitle>Language Selection /언어 선택</DialogTitle>\n        <DialogContent>\n          <DialogContentText align=\"left\">\n            Please Select the Site. / 언어를 선택해 주세요.\n            <Box variant=\"div\" sx={{ padding: \"20px\" }}>\n              <form>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm={12}>\n                    <ReactDataGrid\n                      idProperty=\"id\"\n                      checkboxColumn\n                      selected={selected}\n                      multiSelect={false}\n                      onSelectionChange={onSelectionChange}\n                      style={gridStyle}\n                      columns={columns}\n                      dataSource={locationArray}\n                    />\n                  </Grid>\n                </Grid>\n              </form>\n            </Box>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={selectHandler}>Select</Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default DialogLanLogin;\n"]},"metadata":{},"sourceType":"module"}