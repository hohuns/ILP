{"version":3,"sources":["Service/ApiService.js","store/userSlice.js","components/LogInForm/DialogLanLogin.js","components/LogInForm/Loginform.js","pages/Login.js","components/Layout/DrawerComponent.js","components/Layout/MainNavigation.js","components/Layout/Layout.js","components/MessageLogForm/AddNoteEn.js","components/MessageLogForm/NoteEn.js","components/MessageLogForm/NoteListEn.js","components/MessageLogForm/MessageLogFormEn.js","pages/MessageLogEn.js","components/MessageLogForm/AddNoteKr.js","components/MessageLogForm/NoteKr.js","components/MessageLogForm/NoteListKr.js","components/MessageLogForm/MessageLogFormKr.js","pages/MessageLogKr.js","components/SingInForm/SignInForm.js","pages/SignIn.js","components/ChangePasswordForm/ChangePasswordForm.js","pages/ChangePassword.js","components/Home/HomeFormEn.js","pages/HomePageEn.js","components/Home/HomeFormKr.js","pages/HomePageKr.js","components/UpdateProfileForm/UpdateProfileForm.js","pages/ChangeUserName.js","components/InitialPage/InitialPage.js","pages/InitialPage.js","App.js","index.js"],"names":["logIn","enteredEmail","enteredPassword","a","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","data","ok","console","log","errorMessage","error","message","Error","json","alert","signIn","userSlice","createSlice","name","initialState","user","idToken","isLoggedIn","lan","reducers","updateUser","state","action","payload","updateIdToken","updateIsLoggedIn","updateLanguage","store","configureStore","reducer","usersActions","actions","gridStyle","minHeight","columns","header","defaultFlex","type","defaultVisible","dataSource","id","DialogLanLogin","open","close","useState","selected","setSelected","selectedObject","setSelectedObject","dispatch","useDispatch","filtertObject","filter","d","map","selectHandler","localStorage","setItem","useEffect","onSelectionChange","useCallback","Dialog","onClose","fullWidth","disableEscapeKeyDown","onBackdropClick","DialogTitle","DialogContent","DialogContentText","align","Box","variant","sx","padding","Grid","container","spacing","item","xs","sm","idProperty","checkboxColumn","multiSelect","style","DialogActions","Button","onClick","Login","props","setOpen","idRef","useRef","pwRef","navigate","useNavigate","reduxLan","useSelector","storedLan","getItem","Typography","color","Divider","backgroundColor","marginTop","TextField","required","input","borderRadius","border","margin","label","inputRef","current","value","then","r","registered","displayName","Loginform","DrawerComponent","openDrawer","setOpenDrawer","reduxIsLoggedIn","reduxUser","Drawer","anchor","List","ListItem","divider","button","ListItemIcon","ListItemText","removeItem","Navbar","theme","useTheme","matches","useMediaQuery","breakpoints","down","elevation","Toolbar","display","justifyContent","width","alignItems","component","marginRight","cursor","IconButton","Layout","MainNavigation","children","AddNoteEn","titleRef","textRef","now","Date","reduxUserInfo","onSubmit","event","preventDefault","notes","title","text","date","toLocaleString","logger","AddNote","className","htmlFor","ref","placeholder","rows","NoteEn","NoteListEn","note","key","MessageLogFormEn","setNote","setError","isLoading","setIsLoading","fetchNoteHandlerEn","response","loadedNotes","push","reverse","content","length","MessageLogEn","AddNoteKr","NoteKr","NoteListKr","MessageLogFormKr","fetchNoteHandlerKr","MessageLogKr","SignInForm","SignIn","ChangePasswordForm","reduxidToken","formHandler","ChangePassword","HomeFormEn","height","src","HomePageEn","HomeFormKr","marginLeft","HomePageKr","UpdateProfileForm","userRef","photoUrl","ChangeUserName","InitialPage","App","storedToken","storedIsLoggedIn","storedUser","isMsgEn","isMsgKr","path","element","to","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f83aca2.chunk.js","sourcesContent":["const logIn = async (enteredEmail, enteredPassword) => {\n  try {\n    const data = await fetch(\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          email: enteredEmail,\n          password: enteredPassword,\n          returnSecureToken: true,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    if (!data.ok) {\n      console.log(data);\n      let errorMessage = \"Authentication failed! \\n 로그인에 실패하였습니다.\";\n      if (data?.error?.message) {\n        //equal with if(data && data.error && data.error.message)\n        errorMessage = data.error.message;\n      }\n      throw new Error(errorMessage);\n    }\n    const json = await data.json();\n    console.log(json);\n    return json;\n  } catch (err) {\n    alert(err);\n  }\n};\n\nconst signIn = async (enteredEmail, enteredPassword) => {\n  try {\n    const data = await fetch(\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          email: enteredEmail,\n          password: enteredPassword,\n          returnSecureToken: true,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    if (!data.ok) {\n      console.log(data);\n      let errorMessage =\n        \"Sign In failed! Password Should be more than 7 digits. \\n 회원가입에 실패하였습니다. 비밀번호는 7자 이상이여야 합니다.\";\n      if (data?.error?.message) {\n        //equal with if(data && data.error && data.error.message)\n        errorMessage = data.error.message;\n      }\n      throw new Error(errorMessage);\n    }\n    const json = await data.json();\n    console.log(json);\n    return json;\n  } catch (err) {\n    alert(err);\n  }\n};\n\nexport { logIn, signIn };\n","import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialState = {\n  user: \"\",\n  idToken: \"\",\n  isLoggedIn: false,\n  lan: \"\",\n};\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: initialState,\n  reducers: {\n    updateUser(state, action) {\n      state.user = action.payload;\n    },\n    updateIdToken(state, action) {\n      state.idToken = action.payload;\n    },\n    updateIsLoggedIn(state, action) {\n      state.isLoggedIn = action.payload;\n    },\n    updateLanguage(state, action) {\n      state.lan = action.payload;\n    },\n  },\n});\n\n//Create the store\nconst store = configureStore({\n  reducer: userSlice.reducer,\n});\n\nexport const usersActions = userSlice.actions;\nexport default store;\n","/* eslint-disable react/react-in-jsx-scope */\nimport { useCallback, useEffect, useState } from \"react\";\nimport React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport { Grid, Typography, Box } from \"@mui/material\";\nimport ReactDataGrid from \"@inovua/reactdatagrid-enterprise\";\nimport \"@inovua/reactdatagrid-enterprise/index.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { usersActions } from \"../../store/userSlice\";\n\nconst gridStyle = { minHeight: 120 };\n\nconst columns = [\n  {\n    name: \"lan\",\n    header: \"Language\",\n    defaultFlex: 1,\n    type: \"string\",\n  },\n  { name: \"id\", header: \"Id\", type: \"number\", defaultVisible: false },\n];\n\nconst dataSource = [\n  { id: 1, lan: \"English\" },\n  { id: 2, lan: \"한국어\" },\n];\n\n// eslint-disable-next-line arrow-body-style\nconst DialogLanLogin = ({ open, close }) => {\n  const [selected, setSelected] = useState({});\n  const [selectedObject, setSelectedObject] = useState();\n  const dispatch = useDispatch();\n\n  const handleClose = () => {\n    close();\n  };\n\n  const filtertObject = async () => {\n    dataSource\n      .filter((d) => d.id === selected)\n      .map((d) => setSelectedObject(d));\n  };\n\n  const selectHandler = async () => {\n    if (!selectedObject) {\n      alert(\"Please Select the language \\n언어를 선택해 주세요.\");\n    } else {\n      const lan = selectedObject.lan;\n      dispatch(usersActions.updateLanguage(lan));\n      localStorage.setItem(\"lan\", lan);\n      handleClose();\n      alert(\n        lan === \"한국어\"\n          ? \"언어는 한국어로 설정이 되었습니다.\"\n          : \"Default Language is English.\"\n      );\n    }\n  };\n\n  useEffect(() => {\n    filtertObject();\n  }, [selected]);\n\n  // eslint-disable-next-line no-shadow\n  const onSelectionChange = useCallback(({ selected }) => {\n    setSelected(selected);\n  }, []);\n\n  return (\n    <>\n      <Dialog\n        open={open}\n        onClose={close}\n        fullWidth={true}\n        disableEscapeKeyDown={true}\n        onBackdropClick=\"false\"\n      >\n        <DialogTitle>Language Selection / 언어 선택</DialogTitle>\n        <DialogContent>\n          <DialogContentText align=\"left\">\n            Please Select the Site. / 언어를 선택해 주세요.\n            <Box variant=\"div\" sx={{ padding: \"20px\" }}>\n              <form>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm={12}>\n                    <ReactDataGrid\n                      idProperty=\"id\"\n                      checkboxColumn\n                      selected={selected}\n                      multiSelect={false}\n                      onSelectionChange={onSelectionChange}\n                      style={gridStyle}\n                      columns={columns}\n                      dataSource={dataSource}\n                    />\n                  </Grid>\n                </Grid>\n              </form>\n            </Box>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={selectHandler}>Select</Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default DialogLanLogin;\n","import { Divider } from \"@mui/material\";\nimport { TextField } from \"@mui/material\";\nimport { Grid } from \"@mui/material\";\nimport { Typography } from \"@mui/material\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { logIn } from \"../../Service/ApiService\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport DialogLanguage from \"./DialogLanLogin\";\n\nconst Login = (props) => {\n  const [open, setOpen] = useState(false);\n  const dispatch = useDispatch();\n  const idRef = useRef(\"\");\n  const pwRef = useRef(\"\");\n  let navigate = useNavigate();\n  const reduxidToken = useSelector((state) => state.idToken);\n  const reduxLan = useSelector((state) => state.lan);\n  const storedLan = localStorage.getItem(\"lan\");\n  const dialogClickHandler = () => {\n    setOpen(true);\n  };\n\n  const dialogCloseHandler = () => {\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    dialogClickHandler();\n    dispatch(usersActions.updateLanguage(storedLan));\n  }, []);\n\n  const formHandler = () => {\n    const a = logIn(idRef.current.value, pwRef.current.value);\n    a.then((r) => {\n      console.log(r);\n      if (\n        (r?.registered === true && r?.displayName === \"Hans\") ||\n        (r?.registered === true && r?.displayName === \"Sarah\")\n      ) {\n        dispatch(usersActions.updateIdToken(r.idToken));\n        dispatch(usersActions.updateIsLoggedIn(true));\n        dispatch(usersActions.updateUser(r?.displayName));\n        localStorage.setItem(\"token\", r.idToken);\n        localStorage.setItem(\"isLoggedIn\", true);\n        localStorage.setItem(\"user\", r?.displayName);\n        navigate(\"/hompageen\");\n      } else if (\n        (r?.registered === true && r?.displayName === \"성재\") ||\n        (r?.registered === true && r?.displayName === \"엄마\") ||\n        (r?.registered === true && r?.displayName === \"은지\") ||\n        (r?.registered === true && r?.displayName === \"아빠\")\n      ) {\n        dispatch(usersActions.updateIdToken(r.idToken));\n        dispatch(usersActions.updateIsLoggedIn(true));\n        dispatch(usersActions.updateUser(r?.displayName));\n        localStorage.setItem(\"token\", r.idToken);\n        localStorage.setItem(\"isLoggedIn\", true);\n        localStorage.setItem(\"user\", r?.displayName);\n        navigate(\"/hompagekr\");\n      } else if (r?.registered === true) {\n        alert(\n          reduxLan === \"한국어\"\n            ? \"당신은 승인받지 않은 사용자입니다.\"\n            : \"You are not authorized to use this service.\"\n        );\n      }\n    });\n  };\n\n  return (\n    <section>\n      <Typography variant=\"h6\" color=\"white\">\n        {reduxLan === \"한국어\"\n          ? \"로그에 접속 하려면 아이디와 패스워드를 입력해주세요.\"\n          : \"Input the password to access the Message Log.\"}\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container spacing={4} style={{ marginTop: \"10px\" }}>\n        <Grid item xs={12} sm={3}>\n          {}\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            color=\"primary\"\n            sx={{\n              input: {\n                borderRadius: \"5px\",\n                border: \"1px solid white\",\n                color: \"white\",\n              },\n            }}\n            margin=\"dense\"\n            name=\"Email\"\n            label={reduxLan === \"한국어\" ? \"이메일\" : \"Email\"}\n            type=\"text\"\n            fullWidth\n            inputRef={idRef}\n          />\n          <TextField\n            margin=\"dense\"\n            required\n            name=\"pw\"\n            sx={{\n              input: {\n                borderRadius: \"5px\",\n                border: \"1px solid white\",\n                color: \"white\",\n              },\n            }}\n            label={reduxLan === \"한국어\" ? \"패스워드\" : \"Password\"}\n            type=\"password\"\n            fullWidth\n            inputRef={pwRef}\n          />\n          <button style={{ marginTop: \"30px\" }} onClick={formHandler}>\n            {reduxLan === \"한국어\" ? \"로그인\" : \"Submit\"}\n          </button>\n        </Grid>\n      </Grid>\n      <DialogLanguage open={open} close={dialogCloseHandler} />\n    </section>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport Loginform from \"../components/LogInForm/Loginform\";\n\nconst Login = () => {\n  return (\n    <>\n      <Loginform />\n    </>\n  );\n};\n\nexport default Login;\n","import React, { useEffect } from \"react\";\nimport {\n  Drawer,\n  ListItem,\n  List,\n  ListItemIcon,\n  ListItemText,\n} from \"@mui/material\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\n\nconst DrawerComponent = ({ openDrawer, setOpenDrawer }) => {\n  const reduxIsLoggedIn = useSelector((state) => state.isLoggedIn);\n  const reduxUser = useSelector((state) => state.user);\n  const reduxLan = useSelector((state) => state.lan);\n  const storedLan = localStorage.getItem(\"lan\");\n  const dispatch = useDispatch();\n  let navigate = useNavigate();\n\n  useEffect(() => {\n    dispatch(usersActions.updateLanguage(storedLan));\n  }, [storedLan]);\n\n  const logoutHandler = () => {\n    dispatch(usersActions.updateIdToken(null));\n    dispatch(usersActions.updateIsLoggedIn(false));\n    dispatch(usersActions.updateUser(null));\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"isLoggedIn\");\n    localStorage.removeItem(\"user\");\n    navigate(\"/login\");\n  };\n\n  return (\n    <Drawer anchor=\"right\" open={openDrawer}>\n      {reduxIsLoggedIn ? (\n        <List>\n          <ListItem\n            divider\n            button\n            onClick={() => {\n              if (reduxUser === \"Hans\" || reduxUser === \"Sarah\") {\n                navigate(\"/hompageen\");\n              } else if (\n                reduxUser === \"성재\" ||\n                reduxUser === \"엄마\" ||\n                reduxUser === \"아빠\" ||\n                reduxUser === \"은지\"\n              ) {\n                navigate(\"/hompagekr\");\n              }\n              setOpenDrawer(false);\n            }}\n          >\n            <ListItemIcon>\n              <ListItemText>\n                {reduxLan === \"한국어\" ? \"홈\" : \"Home\"}\n              </ListItemText>\n            </ListItemIcon>\n          </ListItem>\n          <ListItem\n            divider\n            button\n            onClick={() => {\n              navigate(\"/changepassword\");\n              setOpenDrawer(false);\n            }}\n          >\n            <ListItemIcon>\n              <ListItemText>\n                {reduxLan === \"한국어\" ? \"비밀번호 바꾸기\" : \"Change Password\"}\n              </ListItemText>\n            </ListItemIcon>\n          </ListItem>\n          <ListItem\n            divider\n            button\n            onClick={() => {\n              if (reduxUser === \"Hans\" || reduxUser === \"Sarah\") {\n                navigate(\"/msglogen\");\n              } else if (\n                reduxUser === \"성재\" ||\n                reduxUser === \"엄마\" ||\n                reduxUser === \"아빠\" ||\n                reduxUser === \"은지\"\n              ) {\n                navigate(\"/msglogkr\");\n              }\n              setOpenDrawer(false);\n            }}\n          >\n            <ListItemIcon>\n              <ListItemText>\n                {reduxLan === \"한국어\" ? \"메세지 로그\" : \"Message Log\"}\n              </ListItemText>\n            </ListItemIcon>\n          </ListItem>\n          <ListItem\n            divider\n            button\n            onClick={() => {\n              logoutHandler();\n              setOpenDrawer(false);\n            }}\n          >\n            <ListItemIcon>\n              <ListItemText>\n                {reduxLan === \"한국어\" ? \"로그아웃\" : \"LogOut\"}\n              </ListItemText>\n            </ListItemIcon>\n          </ListItem>\n        </List>\n      ) : (\n        <List>\n          <ListItem\n            divider\n            button\n            onClick={() => {\n              navigate(\"/signin\");\n              setOpenDrawer(false);\n            }}\n          >\n            <ListItemIcon>\n              <ListItemText>\n                {reduxLan === \"한국어\" ? \"가입하기\" : \"Register\"}\n              </ListItemText>\n            </ListItemIcon>\n          </ListItem>\n          <ListItem\n            divider\n            button\n            onClick={() => {\n              navigate(\"/login\");\n              setOpenDrawer(false);\n            }}\n          >\n            <ListItemIcon>\n              <ListItemText>\n                {reduxLan === \"한국어\" ? \"로그인\" : \"LogIn\"}\n              </ListItemText>\n            </ListItemIcon>\n          </ListItem>\n        </List>\n      )}\n    </Drawer>\n  );\n};\n\nexport default DrawerComponent;\n","import { Toolbar, IconButton, Typography, useMediaQuery } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport { Box } from \"@mui/system\";\nimport DrawerComponent from \"./DrawerComponent\";\nimport { useTheme } from \"@mui/material/styles\";\nimport ListIcon from \"@mui/icons-material/List\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\n\nconst Navbar = () => {\n  const [openDrawer, setOpenDrawer] = useState(true);\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const reduxIsLoggedIn = useSelector((state) => state.isLoggedIn);\n  let navigate = useNavigate();\n  const reduxUser = useSelector((state) => state.user);\n  const storedLan = localStorage.getItem(\"lan\");\n  const dispatch = useDispatch();\n  const reduxLan = useSelector((state) => state.lan);\n\n  useEffect(() => {\n    dispatch(usersActions.updateLanguage(storedLan));\n  }, [storedLan]);\n\n  const logoutHandler = () => {\n    dispatch(usersActions.updateIdToken(null));\n    dispatch(usersActions.updateIsLoggedIn(false));\n    dispatch(usersActions.updateUser(null));\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"isLoggedIn\");\n    localStorage.removeItem(\"user\");\n    navigate(\"/login\");\n  };\n\n  return (\n    <>\n      <Box\n        elevation={10}\n        sx={{\n          backgroundColor:\n            \"linear-gradient(to left, #3399ff 27%, #9999ff 100%);\",\n        }}\n      >\n        <Toolbar>\n          <Box\n            sx={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              width: \"100%\",\n              alignItems: \"center\",\n              padding: \"10px 0px\",\n            }}\n            component=\"div\"\n          >\n            {/* link */}\n            {matches && (\n              <DrawerComponent\n                openDrawer={openDrawer}\n                setOpenDrawer={setOpenDrawer}\n              />\n            )}\n            {reduxIsLoggedIn && !matches ? (\n              <Box\n                sx={{\n                  display: \"flex\",\n                }}\n              >\n                <Typography\n                  sx={{\n                    marginRight: \"20px\",\n                    cursor: \"pointer\",\n                    color: \"white\",\n                  }}\n                  onClick={() => {\n                    if (reduxUser === \"Hans\" || reduxUser === \"Sarah\") {\n                      navigate(\"/hompageen\");\n                    } else if (\n                      reduxUser === \"성재\" ||\n                      reduxUser === \"엄마\" ||\n                      reduxUser === \"아빠\" ||\n                      reduxUser === \"은지\"\n                    ) {\n                      navigate(\"/hompagekr\");\n                    }\n                  }}\n                >\n                  {reduxLan === \"한국어\" ? \"홈\" : \"Home\"}\n                </Typography>\n                <Typography\n                  sx={{\n                    marginRight: \"20px\",\n                    cursor: \"pointer\",\n                    color: \"white\",\n                  }}\n                  onClick={() => {\n                    navigate(\"/changepassword\");\n                  }}\n                >\n                  {reduxLan === \"한국어\"\n                    ? \"비밀번호 바꾸기\"\n                    : \"Change Password\"}\n                </Typography>\n                <Typography\n                  sx={{\n                    marginRight: \"20px\",\n                    cursor: \"pointer\",\n                    color: \"white\",\n                  }}\n                  onClick={() => {\n                    if (reduxUser === \"Hans\" || reduxUser === \"Sarah\") {\n                      navigate(\"/msglogen\");\n                    } else if (\n                      reduxUser === \"성재\" ||\n                      reduxUser === \"엄마\" ||\n                      reduxUser === \"아빠\" ||\n                      reduxUser === \"은지\"\n                    ) {\n                      navigate(\"/msglogkr\");\n                    }\n                  }}\n                >\n                  {reduxLan === \"한국어\" ? \"메세지 로그\" : \"Message Log\"}\n                </Typography>\n              </Box>\n            ) : null}\n            {/* Button link */}\n            <Box\n              sx={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              {matches ? (\n                <IconButton onClick={() => setOpenDrawer(true)}>\n                  <ListIcon></ListIcon>\n                </IconButton>\n              ) : !reduxIsLoggedIn ? (\n                <>\n                  <button\n                    onClick={() => navigate(\"/login\")}\n                    style={{ marginRight: \"20px\" }}\n                  >\n                    {reduxLan === \"한국어\" ? \"로그인\" : \"LogIn\"}\n                  </button>\n                  <button onClick={() => navigate(\"/signin\")}>\n                    {reduxLan === \"한국어\" ? \"계정 생성\" : \"Register Account\"}\n                  </button>\n                </>\n              ) : (\n                // <button onClick={() => navigate(\"/updateusername\")}>\n                //   {reduxLan === \"한국어\"\n                //     ? \"ㄹ\"\n                //     : \"Change Display name\"}\n                // </button>\n                <button onClick={logoutHandler}>\n                  {reduxLan === \"한국어\" ? \"로그아웃\" : \"Logout\"}\n                </button>\n              )}\n            </Box>\n          </Box>\n        </Toolbar>\n      </Box>\n    </>\n  );\n};\n\nexport default Navbar;\n","import MainNavigation from \"./MainNavigation\";\nimport React from \"react\";\n\nconst Layout = (props) => {\n  return (\n    <>\n      <MainNavigation />\n      <main>{props.children}</main>\n    </>\n  );\n};\n\nexport default Layout;\n","import React, { useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./AddNote.css\";\n\nfunction AddNoteEn(props) {\n  const titleRef = useRef(\"\");\n  const textRef = useRef(\"\");\n  const now = new Date();\n\n  const reduxUserInfo = useSelector((state) => state.user);\n  function submitHandler(event) {\n    event.preventDefault();\n    const notes = {\n      title: titleRef.current.value,\n      text: textRef.current.value,\n      date: now.toLocaleString(),\n      logger: reduxUserInfo,\n    };\n\n    props.AddNote(notes);\n    titleRef.current.value = \"\";\n    textRef.current.value = \"\";\n  }\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className=\"control\">\n        <label htmlFor=\"title\">Title</label>\n        <input\n          type=\"text\"\n          id=\"title\"\n          ref={titleRef}\n          style={{ color: \"white\" }}\n          placeholder=\"Log the title here..!\"\n        />\n      </div>\n      <div className=\"control\">\n        <label htmlFor=\"text-log\">Text Log</label>\n        <textarea\n          rows=\"5\"\n          id=\"text-log\"\n          ref={textRef}\n          style={{ color: \"white\" }}\n          placeholder=\"Log the past event that you want to mention..\"\n        ></textarea>\n      </div>\n      <button>Submit</button>\n    </form>\n  );\n}\n\nexport default AddNoteEn;\n","import React from \"react\";\n\nimport \"./Note.css\";\n\nconst NoteEn = (props) => {\n  return (\n    <div>\n      <li className=\"note \">\n        <h3>{props.title}</h3>\n        <p>{props.text}</p>\n        <h6>{props.date}</h6>\n      </li>\n    </div>\n  );\n};\n\nexport default NoteEn;\n","import React from \"react\";\nimport Note from \"./NoteEn\";\nimport \"./NoteList.css\";\n\nconst NoteListEn = (props) => {\n  return (\n    <ul className=\"note-list\">\n      {props.note.map((note) => (\n        <Note\n          key={note.id}\n          title={note.title}\n          date={note.date}\n          text={note.text}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default NoteListEn;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  fetchNoteHandlerEn,\n  fetchNoteHandlerKr,\n  addNoteHandlerEn,\n  addNoteHandlerKr,\n} from \"../../Service/ApiService\";\nimport AddNoteEn from \"./AddNoteEn\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\nimport NoteListEn from \"./NoteListEn\";\nconst MessageLogFormEn = () => {\n  const reduxUser = useSelector((state) => state.user);\n  const dispatch = useDispatch();\n  const [note, setNote] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  let navigate = useNavigate();\n\n  const logoutHandler = () => {\n    dispatch(usersActions.updateIdToken(null));\n    dispatch(usersActions.updateIsLoggedIn(false));\n    dispatch(usersActions.updateUser(null));\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"isLoggedIn\");\n    localStorage.removeItem(\"user\");\n    navigate(\"/login\");\n  };\n\n  const fetchNoteHandlerEn = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        \"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\"\n      );\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      console.log(data);\n      const loadedNotes = [];\n      for (const key in data) {\n        loadedNotes.push({\n          id: key,\n          title: data[key].title,\n          text: data[key].text,\n          date: `${data[key].logger} logged message at ${data[key].date}....`,\n        });\n      }\n      loadedNotes.reverse();\n      console.log(loadedNotes);\n      setNote(loadedNotes);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  async function addNoteHandlerEn(note) {\n    const response = await fetch(\n      \"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(note),\n        headers: {\n          \"Content-Type\": \"appication/json\",\n        },\n      }\n    );\n    const data = await response.json();\n    console.log(data);\n    alert(`Message is successfully added..!`);\n    fetchNoteHandlerEn();\n  }\n\n  useEffect(() => {\n    fetchNoteHandlerEn();\n  }, [fetchNoteHandlerEn]);\n\n  let content = <p style={{ color: \"white\" }}>Found no Notes.</p>;\n\n  if (note.length > 0) {\n    content = <NoteListEn note={note} />;\n  }\n\n  if (error) {\n    content = <p style={{ color: \"white\" }}>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p style={{ color: \"white\" }}>Loading...</p>;\n  }\n\n  return (\n    <div>\n      <section>\n        <h3 style={{ color: \"white\" }}>Welcome..! {reduxUser} </h3>\n        <button onClick={logoutHandler}> Logout</button>\n      </section>\n      <section>\n        <h3 style={{ color: \"white\" }}>Log Format</h3>\n        <AddNoteEn AddNote={addNoteHandlerEn} logger={reduxUser}></AddNoteEn>\n      </section>\n      <section>\n        <button onClick={fetchNoteHandlerEn}>Update Notes</button>\n      </section>\n      <section>\n        <h3 style={{ color: \"white\" }}>Log</h3>\n        {content}\n      </section>\n    </div>\n  );\n};\n\nexport default MessageLogFormEn;\n","import React from \"react\";\nimport MessageLogFormEn from \"../components/MessageLogForm/MessageLogFormEn\";\n\nconst MessageLogEn = () => {\n  return <MessageLogFormEn />;\n};\n\nexport default MessageLogEn;\n","import React, { useRef } from \"react\";\nimport \"./AddNote.css\";\nimport { useSelector } from \"react-redux\";\nfunction AddNoteKr(props) {\n  const titleRef = useRef(\"\");\n  const textRef = useRef(\"\");\n  const now = new Date();\n  const reduxUserInfo = useSelector((state) => state.user);\n  function submitHandler(event) {\n    event.preventDefault();\n    const notes = {\n      title: titleRef.current.value,\n      text: textRef.current.value,\n      date: now.toLocaleString(),\n      logger: reduxUserInfo,\n    };\n\n    console.log(notes);\n    props.AddNote(notes);\n    titleRef.current.value = \"\";\n    textRef.current.value = \"\";\n  }\n\n  console.log(reduxUserInfo);\n  return (\n    <form onSubmit={submitHandler}>\n      <div className=\"control\">\n        <label htmlFor=\"title\">제목</label>\n        <input\n          type=\"text\"\n          id=\"title\"\n          ref={titleRef}\n          style={{ color: \"white\" }}\n          placeholder=\"제목을 입력하시오.\"\n        />\n      </div>\n      <div className=\"control\">\n        <label htmlFor=\"text-log\">내용</label>\n        <textarea\n          rows=\"5\"\n          id=\"text-log\"\n          ref={textRef}\n          style={{ color: \"white\" }}\n          placeholder=\"남기고 싶은 말을 적으시오..\"\n        ></textarea>\n      </div>\n      <button>제출</button>\n    </form>\n  );\n}\n\nexport default AddNoteKr;\n","import React from \"react\";\n\nimport \"./Note.css\";\n\nconst NoteKr = (props) => {\n  return (\n    <div>\n      <li className=\"note \">\n        <h3>{props.title}</h3>\n        <p>{props.text}</p>\n        <h6>{props.date}</h6>\n      </li>\n    </div>\n  );\n};\n\nexport default NoteKr;\n","import React from \"react\";\nimport Note from \"./NoteKr\";\nimport \"./NoteList.css\";\n\nconst NoteListKr = (props) => {\n  return (\n    <ul className=\"note-list\">\n      {props.note.map((note) => (\n        <Note\n          key={note.id}\n          title={note.title}\n          date={note.date}\n          text={note.text}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default NoteListKr;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport AddNoteKr from \"./AddNoteKr\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\nimport NoteListKr from \"./NoteListKr\";\nconst MessageLogFormKr = () => {\n  const reduxUser = useSelector((state) => state.user);\n  const dispatch = useDispatch();\n  const [note, setNote] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  let navigate = useNavigate();\n\n  const logoutHandler = () => {\n    dispatch(usersActions.updateIdToken(null));\n    dispatch(usersActions.updateIsLoggedIn(false));\n    dispatch(usersActions.updateUser(null));\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"isLoggedIn\");\n    localStorage.removeItem(\"user\");\n    navigate(\"/login\");\n  };\n\n  const fetchNoteHandlerKr = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        \"https://react-http-2887f-default-rtdb.firebaseio.com/notes2.json\"\n      );\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      const loadedNotes = [];\n      for (const key in data) {\n        loadedNotes.push({\n          id: key,\n          title: data[key].title,\n          text: data[key].text,\n          date: `${data[key].logger}님이 ${data[key].date}에 남기셨습니다..`,\n        });\n      }\n      loadedNotes.reverse();\n      console.log(loadedNotes);\n      setNote(loadedNotes);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  async function addNoteHandlerKr(note) {\n    const response = await fetch(\n      \"https://react-http-2887f-default-rtdb.firebaseio.com/notes2.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(note),\n        headers: {\n          \"Content-Type\": \"appication/json\",\n        },\n      }\n    );\n    const data = await response.json();\n    console.log(data);\n    alert(`메세지가 성공적으로 추가되었습니다.`);\n    fetchNoteHandlerKr();\n  }\n\n  useEffect(() => {\n    fetchNoteHandlerKr();\n  }, [fetchNoteHandlerKr]);\n\n  let content = <p style={{ color: \"white\" }}>Found no Notes.</p>;\n\n  if (note.length > 0) {\n    content = <NoteListKr note={note} />;\n  }\n\n  if (error) {\n    content = <p style={{ color: \"white\" }}>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p style={{ color: \"white\" }}>Loading...</p>;\n  }\n\n  return (\n    <div>\n      <section>\n        <h3 style={{ color: \"white\" }}>반갑습니다.. {reduxUser}님.... </h3>\n        <button onClick={logoutHandler}> Logout</button>\n      </section>\n      <section>\n        <h3 style={{ color: \"white\" }}>메세지 양식</h3>\n        <AddNoteKr AddNote={addNoteHandlerKr} logger={reduxUser}></AddNoteKr>\n      </section>\n      <section>\n        <button onClick={fetchNoteHandlerKr}>메세지 업데이트</button>\n      </section>\n      <section>\n        <h3 style={{ color: \"white\" }}>메세지 로그</h3>\n        {content}\n      </section>\n    </div>\n  );\n};\n\nexport default MessageLogFormKr;\n","import React from \"react\";\nimport MessageLogFormEn from \"../components/MessageLogForm/MessageLogFormKr\";\n\nconst MessageLogKr = () => {\n  return <MessageLogFormEn />;\n};\n\nexport default MessageLogKr;\n","import { Grid } from \"@mui/material\";\nimport { TextField } from \"@mui/material\";\nimport { Divider } from \"@mui/material\";\nimport { Typography } from \"@mui/material\";\nimport React, { useEffect, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { signIn } from \"../../Service/ApiService\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { usersActions } from \"../../store/userSlice\";\n\nconst SignInForm = () => {\n  const idRef = useRef(\"\");\n  const pwRef = useRef(\"\");\n  let navigate = useNavigate();\n  const reduxLan = useSelector((state) => state.lan);\n\n  const formHandler = () => {\n    const a = signIn(idRef.current.value, pwRef.current.value);\n    a.then((r) => {\n      if (r?.idToken) {\n        alert(\"Successfully Sign In. \\n 가입이 완료 되었습니다.\");\n        navigate(\"/login\");\n      }\n    });\n  };\n\n  return (\n    <section>\n      <Typography variant=\"h6\" color=\"white\">\n        {reduxLan === \"한국어\"\n          ? \"이메일 과 패스워드를 입력해서 가입해 보세요. 비밀번호는 7자리 이상이여야 됩니다.\"\n          : \"Input Email and Password to sign in. Password should be more than 7 digits.\"}\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container spacing={4} style={{ marginTop: \"10px\" }}>\n        <Grid item xs={12} sm={3}>\n          {}\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            color=\"primary\"\n            sx={{\n              input: {\n                borderRadius: \"5px\",\n                border: \"1px solid white\",\n                color: \"white\",\n              },\n            }}\n            margin=\"dense\"\n            name=\"Email\"\n            label=\"Email\"\n            type=\"text\"\n            fullWidth\n            inputRef={idRef}\n          />\n          <TextField\n            margin=\"dense\"\n            required\n            name=\"pw\"\n            sx={{\n              input: {\n                borderRadius: \"5px\",\n                border: \"1px solid white\",\n                color: \"white\",\n              },\n            }}\n            label=\"Password\"\n            type=\"password\"\n            fullWidth\n            inputRef={pwRef}\n          />\n          <button style={{ marginTop: \"30px\" }} onClick={formHandler}>\n            {reduxLan === \"한국어\" ? \"제출\" : \"Submit\"}\n          </button>\n        </Grid>\n      </Grid>\n    </section>\n  );\n};\n\nexport default SignInForm;\n","import React from \"react\";\nimport SignInform from \"../components/SingInForm/SignInForm\";\nfunction SignIn() {\n  return <SignInform />;\n}\n\nexport default SignIn;\n","import { Divider } from \"@mui/material\";\nimport { TextField } from \"@mui/material\";\nimport { Grid } from \"@mui/material\";\nimport { Typography } from \"@mui/material\";\nimport React, { useRef } from \"react\";\nimport { logIn } from \"../../Service/ApiService\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst ChangePasswordForm = (props) => {\n  const pwRef = useRef(\"\");\n  let navigate = useNavigate();\n  const reduxidToken = useSelector((state) => state.idToken);\n  const reduxLan = useSelector((state) => state.lan);\n\n  const formHandler = async () => {\n    console.log(pwRef.current.value);\n    try {\n      const data = await fetch(\n        \"https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            idToken: reduxidToken,\n            password: pwRef.current.value,\n            returnSecureToken: false,\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      if (!data.ok) {\n        console.log(data);\n        let errorMessage =\n          reduxLan === \"한국어\"\n            ? \"비밀번호 변경에 실패하였습니다. 비밀번호는 7자 이상이여야 합니다..\"\n            : \"Failed to change password. Password Should be more than 7 digits.\";\n        if (data?.error?.message) {\n          //equal with if(data && data.error && data.error.message)\n          errorMessage = data.error.message;\n        }\n        throw new Error(errorMessage);\n      }\n      const json = await data.json();\n      console.log(json);\n      alert(\n        reduxLan === \"한국어\"\n          ? \"성공하였습니다..\"\n          : \"Succeded to change the password.\"\n      );\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  console.log(reduxidToken);\n  return (\n    <section>\n      <Typography variant=\"h6\" color=\"white\">\n        {reduxLan === \"한국어\"\n          ? \"변경할 패스워드를 입력해 주세요.\"\n          : \"Input the password that you want to change.\"}\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container spacing={4} style={{ marginTop: \"10px\" }}>\n        <Grid item xs={12} sm={3}>\n          {}\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            margin=\"dense\"\n            required\n            name=\"pw\"\n            sx={{\n              input: {\n                borderRadius: \"5px\",\n                border: \"1px solid white\",\n                color: \"white\",\n              },\n            }}\n            label=\"Password\"\n            type=\"password\"\n            fullWidth\n            inputRef={pwRef}\n          />\n          <button style={{ marginTop: \"30px\" }} onClick={formHandler}>\n            {reduxLan === \"한국어\" ? \"제출\" : \"Submit\"}\n          </button>\n        </Grid>\n      </Grid>\n    </section>\n  );\n};\n\nexport default ChangePasswordForm;\n","import React from \"react\";\nimport ChangePasswordForm from \"../components/ChangePasswordForm/ChangePasswordForm\";\nconst ChangePassword = () => {\n  return <ChangePasswordForm />;\n};\n\nexport default ChangePassword;\n","import { Divider } from \"@mui/material\";\n\nimport { Grid } from \"@mui/material\";\nimport { Typography, useMediaQuery } from \"@mui/material\";\nimport React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Box } from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\nconst HomeFormEn = (props) => {\n  let navigate = useNavigate();\n  const reduxUser = useSelector((state) => state.user);\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"sm\"));\n\n  return (\n    <section>\n      <Typography variant=\"h6\" color=\"white\">\n        Welcome Back.. {reduxUser}..\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container spacing={4} style={{ marginTop: \"10px\" }}>\n        <Grid item xs={12} sm={12}>\n          {!matches ? (\n            <Box\n              sx={{ width: \"400px\", height: \"600px\" }}\n              component=\"img\"\n              src=\"image/sarah.jpeg\"\n            ></Box>\n          ) : (\n            <Box\n              sx={{ width: \"300px\", height: \"400px\" }}\n              component=\"img\"\n              src=\"image/sarah.jpeg\"\n            ></Box>\n          )}\n        </Grid>\n        <Grid item xs={12} sm={12}>\n          <button\n            style={{ marginTop: \"30px\" }}\n            onClick={() => {\n              navigate(\"/msglogen\");\n            }}\n          >\n            Log Message\n          </button>\n        </Grid>\n      </Grid>\n    </section>\n  );\n};\n\nexport default HomeFormEn;\n","import React from \"react\";\nimport HomeFormEnForm from \"../components/Home/HomeFormEn\";\nconst HomePageEn = () => {\n  return <HomeFormEnForm />;\n};\n\nexport default HomePageEn;\n","import { Divider } from \"@mui/material\";\n\nimport { Grid } from \"@mui/material\";\nimport { Typography, useMediaQuery } from \"@mui/material\";\nimport React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Box } from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\n\nconst HomeFormKr = (props) => {\n  let navigate = useNavigate();\n  const reduxUser = useSelector((state) => state.user);\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  return (\n    <section>\n      <Typography variant=\"h6\" color=\"white\">\n        환영합니다.. {reduxUser} 님..\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container style={{ marginTop: \"10px\" }}></Grid>\n      {!matches ? (\n        <Grid item xs={12} sm={12}>\n          <Box\n            sx={{ width: \"600px\", height: \"400px\", marginLeft: \"-10px\" }}\n            component=\"img\"\n            src=\"image/family.jpeg\"\n          ></Box>\n          <button\n            style={{ marginTop: \"30px\" }}\n            onClick={() => {\n              navigate(\"/msglogkr\");\n            }}\n          >\n            메세지 남기러 가기\n          </button>\n        </Grid>\n      ) : (\n        <Grid item xs={12} sm={12}>\n          <Box\n            sx={{ width: \"300px\", height: \"300px\", marginLeft: \"-10px\" }}\n            component=\"img\"\n            src=\"image/family.jpeg\"\n          ></Box>\n          <button\n            style={{ marginTop: \"30px\" }}\n            onClick={() => {\n              navigate(\"/msglogkr\");\n            }}\n          >\n            메세지 남기러 가기\n          </button>\n        </Grid>\n      )}\n    </section>\n  );\n};\n\nexport default HomeFormKr;\n","import React from \"react\";\nimport HomeFormKrForm from \"../components/Home/HomeFormKr\";\nconst HomePageKr = () => {\n  return <HomeFormKrForm />;\n};\n\nexport default HomePageKr;\n","import { Divider } from \"@mui/material\";\nimport { TextField } from \"@mui/material\";\nimport { Grid } from \"@mui/material\";\nimport { Typography } from \"@mui/material\";\nimport React, { useRef } from \"react\";\nimport { logIn } from \"../../Service/ApiService\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst UpdateProfileForm = (props) => {\n  const userRef = useRef(\"\");\n  let navigate = useNavigate();\n  const reduxidToken = useSelector((state) => state.idToken);\n  const reduxLan = useSelector((state) => state.lan);\n\n  const formHandler = async () => {\n    console.log(userRef.current.value);\n    try {\n      const data = await fetch(\n        \"https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            idToken: reduxidToken,\n            displayName: userRef.current.value,\n            photoUrl: null,\n            returnSecureToken: false,\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      if (!data.ok) {\n        console.log(data);\n        let errorMessage =\n          reduxLan === \"한국어\"\n            ? \"사용자 이름 변경에 실패하였습니다.\"\n            : \"Failed to change user name.\";\n        if (data?.error?.message) {\n          //equal with if(data && data.error && data.error.message)\n          errorMessage = data.error.message;\n        }\n        throw new Error(errorMessage);\n      }\n      const json = await data.json();\n      console.log(json);\n      alert(\"성공하였습니다.\");\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  console.log(reduxidToken);\n  return (\n    <section>\n      <Typography variant=\"h6\" color=\"white\">\n        변경할 사용자 이름을 입력해 주세요.\n        {reduxLan === \"한국어\"\n          ? \"변경할 사용자 이름을 입력해 주세요.\"\n          : \"Input the username that you want to change.\"}\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container spacing={4} style={{ marginTop: \"10px\" }}>\n        <Grid item xs={12} sm={3}>\n          {}\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            margin=\"dense\"\n            required\n            name=\"Username\"\n            sx={{\n              input: {\n                borderRadius: \"5px\",\n                border: \"1px solid white\",\n                color: \"white\",\n              },\n            }}\n            label=\"Username\"\n            type=\"Username\"\n            fullWidth\n            inputRef={userRef}\n          />\n          <button style={{ marginTop: \"30px\" }} onClick={formHandler}>\n            Submit\n          </button>\n        </Grid>\n      </Grid>\n    </section>\n  );\n};\n\nexport default UpdateProfileForm;\n","import React from \"react\";\nimport ChangeUserNameForm from \"../components/UpdateProfileForm/UpdateProfileForm\";\nconst ChangeUserName = () => {\n  return <ChangeUserNameForm />;\n};\n\nexport default ChangeUserName;\n","import { Divider } from \"@mui/material\";\n\nimport { Grid } from \"@mui/material\";\nimport { Typography } from \"@mui/material\";\nimport React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { Box } from \"@mui/material\";\n\nconst InitialPage = (props) => {\n  let navigate = useNavigate();\n  const reduxUser = useSelector((state) => state.user);\n\n  return (\n    <section>\n      <Typography variant=\"p\" color=\"white\">\n        Internet Logger v2\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container style={{ marginTop: \"10px\" }}></Grid>\n      <Grid item xs={12} sm={12}>\n        <Typography variant=\"h6\" color=\"white\">\n          Select Menu to Start.\n        </Typography>\n        <Typography variant=\"h6\" color=\"white\">\n          원하는 기능을 선택하여 시작해보세요.\n        </Typography>\n      </Grid>\n    </section>\n  );\n};\n\nexport default InitialPage;\n","import React from \"react\";\nimport InitialPageForm from \"../components/InitialPage/InitialPage\";\nconst InitialPage = () => {\n  return <InitialPageForm />;\n};\n\nexport default InitialPage;\n","import React, { useEffect } from \"react\";\nimport { Routes, Route, Navigate } from \"react-router-dom\";\nimport \"./App.css\";\nimport Login from \"./pages/Login\";\nimport Layout from \"./components/Layout/Layout\";\nimport MessageLogEn from \"./pages/MessageLogEn\";\nimport MessageLogKr from \"./pages/MessageLogKr\";\nimport SignIn from \"./pages/SignIn\";\nimport ChangePassword from \"./pages/ChangePassword\";\nimport HomePageEn from \"./pages/HomePageEn\";\nimport HomePageKr from \"./pages/HomePageKr\";\nimport ChangeUserName from \"./pages/ChangeUserName\";\nimport InitialPage from \"./pages/InitialPage\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { usersActions } from \"./store/userSlice\";\n\nfunction App() {\n  const reduxIsLoggedIn = useSelector((state) => state.isLoggedIn);\n  const reduxUser = useSelector((state) => state.user);\n  const dispatch = useDispatch();\n  const storedToken = localStorage.getItem(\"token\");\n  const storedIsLoggedIn = localStorage.getItem(\"isLoggedIn\");\n  const storedUser = localStorage.getItem(\"user\");\n\n  useEffect(() => {\n    if (storedIsLoggedIn) {\n      dispatch(usersActions.updateIdToken(storedToken));\n      dispatch(usersActions.updateUser(storedUser));\n      dispatch(usersActions.updateIsLoggedIn(storedIsLoggedIn));\n    }\n  }, [storedToken, storedIsLoggedIn, storedUser]);\n\n  const isMsgEn = () => {\n    if (\n      (reduxIsLoggedIn && reduxUser === \"Sarah\") ||\n      (reduxIsLoggedIn && reduxUser === \"Hans\")\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const isMsgKr = () => {\n    if (\n      (reduxIsLoggedIn && reduxUser === \"은지\") ||\n      (reduxIsLoggedIn && reduxUser === \"엄마\") ||\n      (reduxIsLoggedIn && reduxUser === \"아빠\") ||\n      (reduxIsLoggedIn && reduxUser === \"성재\")\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return (\n    <Layout>\n      <Routes>\n        {reduxIsLoggedIn ? (\n          <Route path=\"*\" element={<Navigate to=\"/initialpage\" />} />\n        ) : (\n          <Route path=\"*\" element={<Navigate to=\"/login\" />} />\n        )}\n        {!reduxIsLoggedIn && <Route path=\"/login\" element={<Login></Login>} />}\n        {reduxIsLoggedIn && (\n          <Route path=\"/initialpage\" element={<InitialPage></InitialPage>} />\n        )}\n        {!reduxIsLoggedIn && (\n          <Route path=\"/signin\" element={<SignIn></SignIn>} />\n        )}\n        {isMsgEn() && (\n          <Route path=\"/msglogen\" element={<MessageLogEn></MessageLogEn>} />\n        )}\n        {isMsgKr() && (\n          <Route path=\"/msglogkr\" element={<MessageLogKr></MessageLogKr>} />\n        )}\n        {isMsgEn() && (\n          <Route path=\"/hompageen\" element={<HomePageEn></HomePageEn>} />\n        )}\n        {isMsgKr() && (\n          <Route path=\"/hompagekr\" element={<HomePageKr></HomePageKr>} />\n        )}\n        {reduxIsLoggedIn && (\n          <Route\n            path=\"/updateusername\"\n            element={<ChangeUserName></ChangeUserName>}\n          />\n        )}\n        {reduxIsLoggedIn && (\n          <Route\n            path=\"/changepassword\"\n            element={<ChangePassword></ChangePassword>}\n          />\n        )}\n      </Routes>\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./store/userSlice\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}